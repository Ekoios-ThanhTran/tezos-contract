/**
 *  @category Error
 *  @description Error that indicates missing big map metadata (not compliant)
 */
export declare class BigMapMetadataNotFound extends Error {
    name: string;
    constructor();
}
/**
 *  @category Error
 *  @description Error that indicates missing metadata
 */
export declare class MetadataNotFound extends Error {
    info: string;
    name: string;
    constructor(info: string);
}
/**
 *  @category Error
 *  @description Error that indicates missing URI (non compliance to the TZIP-16 standard)
 */
export declare class UriNotFound extends Error {
    name: string;
    constructor();
}
/**
 *  @category Error
 *  @description Error that indicates an invalid URI (non compliance to the TZIP-16 standard)
 */
export declare class InvalidUri extends Error {
    uri: string;
    name: string;
    constructor(uri: string);
}
/**
 *  @category Error
 *  @description Error that indicates invalid metadata (non compliance to the TZIP-16 standard)
 */
export declare class InvalidMetadata extends Error {
    invalidMetadata: string;
    name: string;
    constructor(invalidMetadata: string);
}
/**
 *  @category Error
 *  @description Error that indicates the protocol being passed or used is not supported
 */
export declare class ProtocolNotSupported extends Error {
    protocol: string;
    name: string;
    constructor(protocol: string);
}
/**
 *  @category Error
 *  @description Error that indicates the metadata type is invalid (non compliance to the TZIP-16 standard)
 */
export declare class InvalidMetadataType extends Error {
    name: string;
    constructor();
}
/**
 *  @category Error
 *  @description Error that indicates metadata provider being unconfigured in the TezosToolkit instance
 */
export declare class UnconfiguredMetadataProviderError extends Error {
    name: string;
    constructor();
}
/**
 *  @category Error
 *  @description Error that indicates a forbidden instruction being found inside the View code
 */
export declare class ForbiddenInstructionInViewCode extends Error {
    instruction: string;
    name: string;
    constructor(instruction: string);
}
/**
 *  @category Error
 *  @description Error that indicates parameters are being passed when it is not required
 */
export declare class NoParameterExpectedError extends Error {
    viewName: string;
    args: any[];
    name: string;
    constructor(viewName: string, args: any[]);
}
/**
 *  @category Error
 *  @description Error that indicates invalid view parameter being passed or used
 */
export declare class InvalidViewParameterError extends Error {
    viewName: string;
    sigs: any[];
    args: any[];
    name: string;
    constructor(viewName: string, sigs: any[], args: any[]);
}
